#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pos.Desktop
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="POS")]
	public partial class POSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTableSeat(TableSeat instance);
    partial void UpdateTableSeat(TableSeat instance);
    partial void DeleteTableSeat(TableSeat instance);
    partial void InsertMenuGroup(MenuGroup instance);
    partial void UpdateMenuGroup(MenuGroup instance);
    partial void DeleteMenuGroup(MenuGroup instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    partial void InsertReservationTable(ReservationTable instance);
    partial void UpdateReservationTable(ReservationTable instance);
    partial void DeleteReservationTable(ReservationTable instance);
    partial void InsertSystemLog(SystemLog instance);
    partial void UpdateSystemLog(SystemLog instance);
    partial void DeleteSystemLog(SystemLog instance);
    partial void InsertOrderKassa(OrderKassa instance);
    partial void UpdateOrderKassa(OrderKassa instance);
    partial void DeleteOrderKassa(OrderKassa instance);
    partial void InsertMenuCard(MenuCard instance);
    partial void UpdateMenuCard(MenuCard instance);
    partial void DeleteMenuCard(MenuCard instance);
    partial void InsertCustomerOrder(CustomerOrder instance);
    partial void UpdateCustomerOrder(CustomerOrder instance);
    partial void DeleteCustomerOrder(CustomerOrder instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public POSDataContext() : 
				base(global::Pos.Desktop.Properties.Settings.Default.POSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TableSeat> TableSeats
		{
			get
			{
				return this.GetTable<TableSeat>();
			}
		}
		
		public System.Data.Linq.Table<MenuGroup> MenuGroups
		{
			get
			{
				return this.GetTable<MenuGroup>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<PictureGroup> PictureGroups
		{
			get
			{
				return this.GetTable<PictureGroup>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
		
		public System.Data.Linq.Table<ReservationTable> ReservationTables
		{
			get
			{
				return this.GetTable<ReservationTable>();
			}
		}
		
		public System.Data.Linq.Table<SystemLog> SystemLogs
		{
			get
			{
				return this.GetTable<SystemLog>();
			}
		}
		
		public System.Data.Linq.Table<OrderKassa> OrderKassas
		{
			get
			{
				return this.GetTable<OrderKassa>();
			}
		}
		
		public System.Data.Linq.Table<MenuCard> MenuCards
		{
			get
			{
				return this.GetTable<MenuCard>();
			}
		}
		
		public System.Data.Linq.Table<CustomerOrder> CustomerOrders
		{
			get
			{
				return this.GetTable<CustomerOrder>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableSeat")]
	public partial class TableSeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableID;
		
		private int _TableNumber;
		
		private string _TableType;
		
		private string _TableStatus;
		
		private string _TableName;
		
		private bool _IsDelete;
		
		private EntitySet<ReservationTable> _ReservationTables;
		
		private EntitySet<OrderKassa> _OrderKassas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnTableNumberChanging(int value);
    partial void OnTableNumberChanged();
    partial void OnTableTypeChanging(string value);
    partial void OnTableTypeChanged();
    partial void OnTableStatusChanging(string value);
    partial void OnTableStatusChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnIsDeleteChanging(bool value);
    partial void OnIsDeleteChanged();
    #endregion
		
		public TableSeat()
		{
			this._ReservationTables = new EntitySet<ReservationTable>(new Action<ReservationTable>(this.attach_ReservationTables), new Action<ReservationTable>(this.detach_ReservationTables));
			this._OrderKassas = new EntitySet<OrderKassa>(new Action<OrderKassa>(this.attach_OrderKassas), new Action<OrderKassa>(this.detach_OrderKassas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableNumber", DbType="Int NOT NULL")]
		public int TableNumber
		{
			get
			{
				return this._TableNumber;
			}
			set
			{
				if ((this._TableNumber != value))
				{
					this.OnTableNumberChanging(value);
					this.SendPropertyChanging();
					this._TableNumber = value;
					this.SendPropertyChanged("TableNumber");
					this.OnTableNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TableType
		{
			get
			{
				return this._TableType;
			}
			set
			{
				if ((this._TableType != value))
				{
					this.OnTableTypeChanging(value);
					this.SendPropertyChanging();
					this._TableType = value;
					this.SendPropertyChanged("TableType");
					this.OnTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TableStatus
		{
			get
			{
				return this._TableStatus;
			}
			set
			{
				if ((this._TableStatus != value))
				{
					this.OnTableStatusChanging(value);
					this.SendPropertyChanging();
					this._TableStatus = value;
					this.SendPropertyChanged("TableStatus");
					this.OnTableStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit NOT NULL")]
		public bool IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableSeat_ReservationTable", Storage="_ReservationTables", ThisKey="TableID", OtherKey="TableID")]
		public EntitySet<ReservationTable> ReservationTables
		{
			get
			{
				return this._ReservationTables;
			}
			set
			{
				this._ReservationTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableSeat_OrderKassa", Storage="_OrderKassas", ThisKey="TableID", OtherKey="TableID")]
		public EntitySet<OrderKassa> OrderKassas
		{
			get
			{
				return this._OrderKassas;
			}
			set
			{
				this._OrderKassas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationTables(ReservationTable entity)
		{
			this.SendPropertyChanging();
			entity.TableSeat = this;
		}
		
		private void detach_ReservationTables(ReservationTable entity)
		{
			this.SendPropertyChanging();
			entity.TableSeat = null;
		}
		
		private void attach_OrderKassas(OrderKassa entity)
		{
			this.SendPropertyChanging();
			entity.TableSeat = this;
		}
		
		private void detach_OrderKassas(OrderKassa entity)
		{
			this.SendPropertyChanging();
			entity.TableSeat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuGroup")]
	public partial class MenuGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _ParentId;
		
		private string _GroupName;
		
		private EntitySet<MenuCard> _MenuCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public MenuGroup()
		{
			this._MenuCards = new EntitySet<MenuCard>(new Action<MenuCard>(this.attach_MenuCards), new Action<MenuCard>(this.detach_MenuCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroup_MenuCard", Storage="_MenuCards", ThisKey="id", OtherKey="MenuGroupId")]
		public EntitySet<MenuCard> MenuCards
		{
			get
			{
				return this._MenuCards;
			}
			set
			{
				this._MenuCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuCards(MenuCard entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroup = this;
		}
		
		private void detach_MenuCards(MenuCard entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailID;
		
		private int _OrderID;
		
		private int _MenuCardID;
		
		private int _Quantity;
		
		private string _CustomMenuName;
		
		private decimal _CustomMenuPrice;
		
		private string _Remarks;
		
		private EntityRef<OrderKassa> _OrderKassa;
		
		private EntityRef<MenuCard> _MenuCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(int value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnMenuCardIDChanging(int value);
    partial void OnMenuCardIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCustomMenuNameChanging(string value);
    partial void OnCustomMenuNameChanged();
    partial void OnCustomMenuPriceChanging(decimal value);
    partial void OnCustomMenuPriceChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public OrderDetail()
		{
			this._OrderKassa = default(EntityRef<OrderKassa>);
			this._MenuCard = default(EntityRef<MenuCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._OrderKassa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuCardID", DbType="Int NOT NULL")]
		public int MenuCardID
		{
			get
			{
				return this._MenuCardID;
			}
			set
			{
				if ((this._MenuCardID != value))
				{
					if (this._MenuCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuCardIDChanging(value);
					this.SendPropertyChanging();
					this._MenuCardID = value;
					this.SendPropertyChanged("MenuCardID");
					this.OnMenuCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomMenuName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomMenuName
		{
			get
			{
				return this._CustomMenuName;
			}
			set
			{
				if ((this._CustomMenuName != value))
				{
					this.OnCustomMenuNameChanging(value);
					this.SendPropertyChanging();
					this._CustomMenuName = value;
					this.SendPropertyChanged("CustomMenuName");
					this.OnCustomMenuNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomMenuPrice", DbType="Money NOT NULL")]
		public decimal CustomMenuPrice
		{
			get
			{
				return this._CustomMenuPrice;
			}
			set
			{
				if ((this._CustomMenuPrice != value))
				{
					this.OnCustomMenuPriceChanging(value);
					this.SendPropertyChanging();
					this._CustomMenuPrice = value;
					this.SendPropertyChanged("CustomMenuPrice");
					this.OnCustomMenuPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderKassa_OrderDetail", Storage="_OrderKassa", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public OrderKassa OrderKassa
		{
			get
			{
				return this._OrderKassa.Entity;
			}
			set
			{
				OrderKassa previousValue = this._OrderKassa.Entity;
				if (((previousValue != value) 
							|| (this._OrderKassa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderKassa.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._OrderKassa.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("OrderKassa");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCard_OrderDetail", Storage="_MenuCard", ThisKey="MenuCardID", OtherKey="id", IsForeignKey=true)]
		public MenuCard MenuCard
		{
			get
			{
				return this._MenuCard.Entity;
			}
			set
			{
				MenuCard previousValue = this._MenuCard.Entity;
				if (((previousValue != value) 
							|| (this._MenuCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuCard.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._MenuCard.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._MenuCardID = value.id;
					}
					else
					{
						this._MenuCardID = default(int);
					}
					this.SendPropertyChanged("MenuCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Picture")]
	public partial class Picture
	{
		
		private int _id;
		
		private int _GroupId;
		
		private string _Filename;
		
		public Picture()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this._Filename = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PictureGroup")]
	public partial class PictureGroup
	{
		
		private int _id;
		
		private string _GroupName;
		
		public PictureGroup()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationID;
		
		private System.DateTime _ReservationDateTime;
		
		private string _GuestName;
		
		private string _GuestPhone;
		
		private string _Remarks;
		
		private EntitySet<ReservationTable> _ReservationTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIDChanging(int value);
    partial void OnReservationIDChanged();
    partial void OnReservationDateTimeChanging(System.DateTime value);
    partial void OnReservationDateTimeChanged();
    partial void OnGuestNameChanging(string value);
    partial void OnGuestNameChanged();
    partial void OnGuestPhoneChanging(string value);
    partial void OnGuestPhoneChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public Reservation()
		{
			this._ReservationTables = new EntitySet<ReservationTable>(new Action<ReservationTable>(this.attach_ReservationTables), new Action<ReservationTable>(this.detach_ReservationTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime ReservationDateTime
		{
			get
			{
				return this._ReservationDateTime;
			}
			set
			{
				if ((this._ReservationDateTime != value))
				{
					this.OnReservationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ReservationDateTime = value;
					this.SendPropertyChanged("ReservationDateTime");
					this.OnReservationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GuestName
		{
			get
			{
				return this._GuestName;
			}
			set
			{
				if ((this._GuestName != value))
				{
					this.OnGuestNameChanging(value);
					this.SendPropertyChanging();
					this._GuestName = value;
					this.SendPropertyChanged("GuestName");
					this.OnGuestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestPhone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string GuestPhone
		{
			get
			{
				return this._GuestPhone;
			}
			set
			{
				if ((this._GuestPhone != value))
				{
					this.OnGuestPhoneChanging(value);
					this.SendPropertyChanging();
					this._GuestPhone = value;
					this.SendPropertyChanged("GuestPhone");
					this.OnGuestPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationTable", Storage="_ReservationTables", ThisKey="ReservationID", OtherKey="ReservationID")]
		public EntitySet<ReservationTable> ReservationTables
		{
			get
			{
				return this._ReservationTables;
			}
			set
			{
				this._ReservationTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationTables(ReservationTable entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = this;
		}
		
		private void detach_ReservationTables(ReservationTable entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationTable")]
	public partial class ReservationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationTableID;
		
		private int _ReservationID;
		
		private int _TableID;
		
		private EntityRef<Reservation> _Reservation;
		
		private EntityRef<TableSeat> _TableSeat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationTableIDChanging(int value);
    partial void OnReservationTableIDChanged();
    partial void OnReservationIDChanging(int value);
    partial void OnReservationIDChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    #endregion
		
		public ReservationTable()
		{
			this._Reservation = default(EntityRef<Reservation>);
			this._TableSeat = default(EntityRef<TableSeat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReservationTableID
		{
			get
			{
				return this._ReservationTableID;
			}
			set
			{
				if ((this._ReservationTableID != value))
				{
					this.OnReservationTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationTableID = value;
					this.SendPropertyChanged("ReservationTableID");
					this.OnReservationTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", DbType="Int NOT NULL")]
		public int ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					if (this._Reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					if (this._TableSeat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationTable", Storage="_Reservation", ThisKey="ReservationID", OtherKey="ReservationID", IsForeignKey=true)]
		public Reservation Reservation
		{
			get
			{
				return this._Reservation.Entity;
			}
			set
			{
				Reservation previousValue = this._Reservation.Entity;
				if (((previousValue != value) 
							|| (this._Reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservation.Entity = null;
						previousValue.ReservationTables.Remove(this);
					}
					this._Reservation.Entity = value;
					if ((value != null))
					{
						value.ReservationTables.Add(this);
						this._ReservationID = value.ReservationID;
					}
					else
					{
						this._ReservationID = default(int);
					}
					this.SendPropertyChanged("Reservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableSeat_ReservationTable", Storage="_TableSeat", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
		public TableSeat TableSeat
		{
			get
			{
				return this._TableSeat.Entity;
			}
			set
			{
				TableSeat previousValue = this._TableSeat.Entity;
				if (((previousValue != value) 
							|| (this._TableSeat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableSeat.Entity = null;
						previousValue.ReservationTables.Remove(this);
					}
					this._TableSeat.Entity = value;
					if ((value != null))
					{
						value.ReservationTables.Add(this);
						this._TableID = value.TableID;
					}
					else
					{
						this._TableID = default(int);
					}
					this.SendPropertyChanged("TableSeat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemLog")]
	public partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _LogType;
		
		private System.DateTime _LogDateTime;
		
		private string _LogDesc;
		
		private string _LogUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnLogDateTimeChanging(System.DateTime value);
    partial void OnLogDateTimeChanged();
    partial void OnLogDescChanging(string value);
    partial void OnLogDescChanged();
    partial void OnLogUserChanging(string value);
    partial void OnLogUserChanged();
    #endregion
		
		public SystemLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogDateTime
		{
			get
			{
				return this._LogDateTime;
			}
			set
			{
				if ((this._LogDateTime != value))
				{
					this.OnLogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LogDateTime = value;
					this.SendPropertyChanged("LogDateTime");
					this.OnLogDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDesc", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LogDesc
		{
			get
			{
				return this._LogDesc;
			}
			set
			{
				if ((this._LogDesc != value))
				{
					this.OnLogDescChanging(value);
					this.SendPropertyChanging();
					this._LogDesc = value;
					this.SendPropertyChanged("LogDesc");
					this.OnLogDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogUser", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LogUser
		{
			get
			{
				return this._LogUser;
			}
			set
			{
				if ((this._LogUser != value))
				{
					this.OnLogUserChanging(value);
					this.SendPropertyChanging();
					this._LogUser = value;
					this.SendPropertyChanged("LogUser");
					this.OnLogUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class OrderKassa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.DateTime _OrderDate;
		
		private decimal _OrderTotal;
		
		private string _Remarks;
		
		private bool _IsComplete;
		
		private System.DateTime _CompletedDate;
		
		private int _TableID;
		
		private int _OrderNumber;
		
		private string _Name;
		
		private int _Discount;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<CustomerOrder> _CustomerOrders;
		
		private EntityRef<TableSeat> _TableSeat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnOrderTotalChanging(decimal value);
    partial void OnOrderTotalChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnCompletedDateChanging(System.DateTime value);
    partial void OnCompletedDateChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscountChanging(int value);
    partial void OnDiscountChanged();
    #endregion
		
		public OrderKassa()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._CustomerOrders = new EntitySet<CustomerOrder>(new Action<CustomerOrder>(this.attach_CustomerOrders), new Action<CustomerOrder>(this.detach_CustomerOrders));
			this._TableSeat = default(EntityRef<TableSeat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTotal", DbType="Money NOT NULL")]
		public decimal OrderTotal
		{
			get
			{
				return this._OrderTotal;
			}
			set
			{
				if ((this._OrderTotal != value))
				{
					this.OnOrderTotalChanging(value);
					this.SendPropertyChanging();
					this._OrderTotal = value;
					this.SendPropertyChanged("OrderTotal");
					this.OnOrderTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="Int NOT NULL")]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					if (this._TableSeat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int NOT NULL")]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int NOT NULL")]
		public int Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderKassa_OrderDetail", Storage="_OrderDetails", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderKassa_CustomerOrder", Storage="_CustomerOrders", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<CustomerOrder> CustomerOrders
		{
			get
			{
				return this._CustomerOrders;
			}
			set
			{
				this._CustomerOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableSeat_OrderKassa", Storage="_TableSeat", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
		public TableSeat TableSeat
		{
			get
			{
				return this._TableSeat.Entity;
			}
			set
			{
				TableSeat previousValue = this._TableSeat.Entity;
				if (((previousValue != value) 
							|| (this._TableSeat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableSeat.Entity = null;
						previousValue.OrderKassas.Remove(this);
					}
					this._TableSeat.Entity = value;
					if ((value != null))
					{
						value.OrderKassas.Add(this);
						this._TableID = value.TableID;
					}
					else
					{
						this._TableID = default(int);
					}
					this.SendPropertyChanged("TableSeat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderKassa = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderKassa = null;
		}
		
		private void attach_CustomerOrders(CustomerOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderKassa = this;
		}
		
		private void detach_CustomerOrders(CustomerOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderKassa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuCard")]
	public partial class MenuCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _MenuGroupId;
		
		private System.Nullable<int> _Number;
		
		private string _MenuName;
		
		private string _Description;
		
		private decimal _Price;
		
		private System.Nullable<int> _Points;
		
		private System.Nullable<int> _Stock;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<MenuGroup> _MenuGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnMenuGroupIdChanging(int value);
    partial void OnMenuGroupIdChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnMenuNameChanging(string value);
    partial void OnMenuNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    partial void OnStockChanging(System.Nullable<int> value);
    partial void OnStockChanged();
    #endregion
		
		public MenuCard()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._MenuGroup = default(EntityRef<MenuGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuGroupId", DbType="Int NOT NULL")]
		public int MenuGroupId
		{
			get
			{
				return this._MenuGroupId;
			}
			set
			{
				if ((this._MenuGroupId != value))
				{
					if (this._MenuGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MenuGroupId = value;
					this.SendPropertyChanged("MenuGroupId");
					this.OnMenuGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MenuName
		{
			get
			{
				return this._MenuName;
			}
			set
			{
				if ((this._MenuName != value))
				{
					this.OnMenuNameChanging(value);
					this.SendPropertyChanging();
					this._MenuName = value;
					this.SendPropertyChanged("MenuName");
					this.OnMenuNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int")]
		public System.Nullable<int> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuCard_OrderDetail", Storage="_OrderDetails", ThisKey="id", OtherKey="MenuCardID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroup_MenuCard", Storage="_MenuGroup", ThisKey="MenuGroupId", OtherKey="id", IsForeignKey=true)]
		public MenuGroup MenuGroup
		{
			get
			{
				return this._MenuGroup.Entity;
			}
			set
			{
				MenuGroup previousValue = this._MenuGroup.Entity;
				if (((previousValue != value) 
							|| (this._MenuGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuGroup.Entity = null;
						previousValue.MenuCards.Remove(this);
					}
					this._MenuGroup.Entity = value;
					if ((value != null))
					{
						value.MenuCards.Add(this);
						this._MenuGroupId = value.id;
					}
					else
					{
						this._MenuGroupId = default(int);
					}
					this.SendPropertyChanged("MenuGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.MenuCard = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.MenuCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerOrder")]
	public partial class CustomerOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CustomerID;
		
		private int _OrderID;
		
		private EntityRef<OrderKassa> _OrderKassa;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(long value);
    partial void OnCustomerIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    #endregion
		
		public CustomerOrder()
		{
			this._OrderKassa = default(EntityRef<OrderKassa>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="BigInt NOT NULL")]
		public long CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._OrderKassa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderKassa_CustomerOrder", Storage="_OrderKassa", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public OrderKassa OrderKassa
		{
			get
			{
				return this._OrderKassa.Entity;
			}
			set
			{
				OrderKassa previousValue = this._OrderKassa.Entity;
				if (((previousValue != value) 
							|| (this._OrderKassa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderKassa.Entity = null;
						previousValue.CustomerOrders.Remove(this);
					}
					this._OrderKassa.Entity = value;
					if ((value != null))
					{
						value.CustomerOrders.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("OrderKassa");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerOrder", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerOrders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerOrders.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CustomerName;
		
		private string _CustomerPhone;
		
		private string _CustomerEmail;
		
		private string _CustomerAddress;
		
		private string _CustomerCity;
		
		private string _CustomerKelurahan;
		
		private string _CustomerKecamatan;
		
		private string _CustomerPostcode;
		
		private string _PasswordSalt;
		
		private string _PasswordEncrypted;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateUpdated;
		
		private bool _Deleted;
		
		private int _CustomerPoints;
		
		private bool _TwoFactorAuthEnabled;
		
		private EntitySet<CustomerOrder> _CustomerOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnCustomerEmailChanging(string value);
    partial void OnCustomerEmailChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnCustomerCityChanging(string value);
    partial void OnCustomerCityChanged();
    partial void OnCustomerKelurahanChanging(string value);
    partial void OnCustomerKelurahanChanged();
    partial void OnCustomerKecamatanChanging(string value);
    partial void OnCustomerKecamatanChanged();
    partial void OnCustomerPostcodeChanging(string value);
    partial void OnCustomerPostcodeChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordEncryptedChanging(string value);
    partial void OnPasswordEncryptedChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnCustomerPointsChanging(int value);
    partial void OnCustomerPointsChanged();
    partial void OnTwoFactorAuthEnabledChanging(bool value);
    partial void OnTwoFactorAuthEnabledChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerOrders = new EntitySet<CustomerOrder>(new Action<CustomerOrder>(this.attach_CustomerOrders), new Action<CustomerOrder>(this.detach_CustomerOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerEmail", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this.OnCustomerEmailChanging(value);
					this.SendPropertyChanging();
					this._CustomerEmail = value;
					this.SendPropertyChanged("CustomerEmail");
					this.OnCustomerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(500)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerCity", DbType="NVarChar(250)")]
		public string CustomerCity
		{
			get
			{
				return this._CustomerCity;
			}
			set
			{
				if ((this._CustomerCity != value))
				{
					this.OnCustomerCityChanging(value);
					this.SendPropertyChanging();
					this._CustomerCity = value;
					this.SendPropertyChanged("CustomerCity");
					this.OnCustomerCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerKelurahan", DbType="NVarChar(250)")]
		public string CustomerKelurahan
		{
			get
			{
				return this._CustomerKelurahan;
			}
			set
			{
				if ((this._CustomerKelurahan != value))
				{
					this.OnCustomerKelurahanChanging(value);
					this.SendPropertyChanging();
					this._CustomerKelurahan = value;
					this.SendPropertyChanged("CustomerKelurahan");
					this.OnCustomerKelurahanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerKecamatan", DbType="NVarChar(250)")]
		public string CustomerKecamatan
		{
			get
			{
				return this._CustomerKecamatan;
			}
			set
			{
				if ((this._CustomerKecamatan != value))
				{
					this.OnCustomerKecamatanChanging(value);
					this.SendPropertyChanging();
					this._CustomerKecamatan = value;
					this.SendPropertyChanged("CustomerKecamatan");
					this.OnCustomerKecamatanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPostcode", DbType="NVarChar(5)")]
		public string CustomerPostcode
		{
			get
			{
				return this._CustomerPostcode;
			}
			set
			{
				if ((this._CustomerPostcode != value))
				{
					this.OnCustomerPostcodeChanging(value);
					this.SendPropertyChanging();
					this._CustomerPostcode = value;
					this.SendPropertyChanged("CustomerPostcode");
					this.OnCustomerPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordEncrypted", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PasswordEncrypted
		{
			get
			{
				return this._PasswordEncrypted;
			}
			set
			{
				if ((this._PasswordEncrypted != value))
				{
					this.OnPasswordEncryptedChanging(value);
					this.SendPropertyChanging();
					this._PasswordEncrypted = value;
					this.SendPropertyChanged("PasswordEncrypted");
					this.OnPasswordEncryptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPoints", DbType="Int NOT NULL")]
		public int CustomerPoints
		{
			get
			{
				return this._CustomerPoints;
			}
			set
			{
				if ((this._CustomerPoints != value))
				{
					this.OnCustomerPointsChanging(value);
					this.SendPropertyChanging();
					this._CustomerPoints = value;
					this.SendPropertyChanged("CustomerPoints");
					this.OnCustomerPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorAuthEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorAuthEnabled
		{
			get
			{
				return this._TwoFactorAuthEnabled;
			}
			set
			{
				if ((this._TwoFactorAuthEnabled != value))
				{
					this.OnTwoFactorAuthEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorAuthEnabled = value;
					this.SendPropertyChanged("TwoFactorAuthEnabled");
					this.OnTwoFactorAuthEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerOrder", Storage="_CustomerOrders", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<CustomerOrder> CustomerOrders
		{
			get
			{
				return this._CustomerOrders;
			}
			set
			{
				this._CustomerOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerOrders(CustomerOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerOrders(CustomerOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
}
#pragma warning restore 1591
